//
// Created by Thomas Mack on 29/01/2023.
//

#ifndef CHESS_CPP_MAGICS_H
#define CHESS_CPP_MAGICS_H
#include "Bitboard.h"

class Magics {
public:
// magic bitboard information
    static BB rookMask[64];
    static BB bishopMask[64];
    [[maybe_unused]] static BB rookMagics[64];
    static BB bishopMagics[64];

    // attack tables
    static BB bishopAttacks[64][512];
    static BB rookAttacks[64][4096];

    static constexpr int rookBitCounts[] = {
            12, 11, 11, 11, 11, 11, 11, 12,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            12, 11, 11, 11, 11, 11, 11, 12,
    };

    static constexpr int bishopBitCounts[] = {
            6, 5, 5, 5, 5, 5, 5, 6,
            5, 5, 5, 5, 5, 5, 5, 5,
            5, 5, 7, 7, 7, 7, 5, 5,
            5, 5, 7, 9, 9, 7, 5, 5,
            5, 5, 7, 9, 9, 7, 5, 5,
            5, 5, 7, 7, 7, 7, 5, 5,
            5, 5, 5, 5, 5, 5, 5, 5,
            6, 5, 5, 5, 5, 5, 5, 6,
    };

    /*static constexpr BB preCalcRookMagics[] {
        0xa8002c000108020, 0x6c00049b0002001, 0x100200010090040, 0x2480041000800801, 0x280028004000800, 0x900410008040022, 0x280020001001080, 0x2880002041000080,
        0xa000800080400034, 0x4808020004000, 0x2290802004801000, 0x411000d00100020, 0x402800800040080, 0xb000401004208, 0x2409000100040200, 0x1002100004082,
        0x1080004000200040, 0x1090810021004010, 0x801030040200012, 0x500808008001000, 0xa08018014000880, 0x8000808004000200, 0x201008080010200, 0x4801200004100a4,
        0x800080204005, 0x1040200040100048, 0x120200402082, 0xd14880480100080, 0x800040080800800, 0x100040080020080, 0x9020010080800200, 0x813241200148449,
        0x491604001800080, 0x100401000402001, 0x4820010021001040, 0x400402202000812, 0x8010080101001004, 0x1103000209000400, 0x20100804000201, 0x1000008042001114,
        0x8042004100820026, 0x430022012424000, 0xca114086020022, 0x448402200120008, 0x42000408220010, 0x88020004008080, 0x1011000200010004, 0x4204182000d,
        0x443060980a84200, 0x800a00240008280, 0x100801022004200, 0x100008008080, 0x8000400801980, 0x2000810040200, 0x8010100228810400, 0x2000009044210200,
        0x4080008040102101, 0x40002080411d01, 0x2005524060000901, 0x502001008400422, 0x489a000810200402, 0x1004400080a13, 0x4000011008020084, 0x26002114058042,
    }*/

    // taken from blue beta fish
    static constexpr BB preCalcRookMagics[] {
            0x8a80104000800020ULL, 0x140002000100040ULL, 0x2801880a0017001ULL, 0x100081001000420ULL, 0x200020010080420ULL, 0x3001c0002010008ULL, 0x8480008002000100ULL, 0x2080088004402900ULL, 0x800098204000ULL, 0x2024401000200040ULL, 0x100802000801000ULL, 0x120800800801000ULL, 0x208808088000400ULL, 0x2802200800400ULL, 0x2200800100020080ULL, 0x801000060821100ULL, 0x80044006422000ULL, 0x100808020004000ULL, 0x12108a0010204200ULL, 0x140848010000802ULL, 0x481828014002800ULL, 0x8094004002004100ULL, 0x4010040010010802ULL, 0x20008806104ULL, 0x100400080208000ULL, 0x2040002120081000ULL, 0x21200680100081ULL, 0x20100080080080ULL, 0x2000a00200410ULL, 0x20080800400ULL, 0x80088400100102ULL, 0x80004600042881ULL, 0x4040008040800020ULL, 0x440003000200801ULL, 0x4200011004500ULL, 0x188020010100100ULL, 0x14800401802800ULL, 0x2080040080800200ULL, 0x124080204001001ULL, 0x200046502000484ULL, 0x480400080088020ULL, 0x1000422010034000ULL, 0x30200100110040ULL, 0x100021010009ULL, 0x2002080100110004ULL, 0x202008004008002ULL, 0x20020004010100ULL, 0x2048440040820001ULL, 0x101002200408200ULL, 0x40802000401080ULL, 0x4008142004410100ULL, 0x2060820c0120200ULL, 0x1001004080100ULL, 0x20c020080040080ULL, 0x2935610830022400ULL, 0x44440041009200ULL, 0x280001040802101ULL, 0x2100190040002085ULL, 0x80c0084100102001ULL, 0x4024081001000421ULL, 0x20030a0244872ULL, 0x12001008414402ULL, 0x2006104900a0804ULL, 0x1004081002402ULL
    };

    /*static constexpr BB preCalcBishopMagics[] {
        0x821041012004010, 0x80104040c4000, 0x10040048400400, 0x182060c1000418, 0x6a12021040000000, 0x6011421000440, 0x104008484208212, 0x80240200842021,
        0x20490420040400b0, 0x6120102108010050, 0x880a404e0420, 0x80508a082000000, 0x50401104005260c, 0x10090042104c8, 0x50c01200811, 0x4a00900813,
        0x20000408026800, 0xc074001009020432, 0x1109000448100, 0x8010809802014010, 0x804000880a03002, 0x34808808090840, 0x8294843410845010, 0xc00400082080108,
        0x8a0880004902400, 0x8204100645010808, 0x880030802400, 0x5040040102021004, 0x1001001004000, 0x1440900c1300202, 0xc409404020700, 0x10208500820c4a04,
        0x808201205040410, 0x21088204205400, 0x800820101208800, 0x8080020082280080, 0x464280200002008, 0x2100440860804, 0x604912200424804, 0x1004080020a00,
        0x484116029001000, 0x9020491010002802, 0x511804004800, 0x208002024208800, 0x80104008040, 0x5024090041002204, 0xe204902220410210, 0x4050840100200040,
        0x3011080804842828, 0xc4228208a04000, 0x420020207140200, 0x8008412242020802, 0x10c000a002540020, 0x8011109002482640, 0x600401c2040100, 0x402025822008002,
        0x104404044040, 0x812102402421000, 0x8002008a44044401, 0x113101608420210, 0x2008530400, 0x1000902284200, 0x100298410c00, 0x89a1121896040240,
    };*/

    // taken from bluebetafish
    static constexpr BB preCalcBishopMagics[] {
        0x40040844404084ULL, 0x2004208a004208ULL, 0x10190041080202ULL, 0x108060845042010ULL, 0x581104180800210ULL, 0x2112080446200010ULL, 0x1080820820060210ULL, 0x3c0808410220200ULL, 0x4050404440404ULL, 0x21001420088ULL, 0x24d0080801082102ULL, 0x1020a0a020400ULL, 0x40308200402ULL, 0x4011002100800ULL, 0x401484104104005ULL, 0x801010402020200ULL, 0x400210c3880100ULL, 0x404022024108200ULL, 0x810018200204102ULL, 0x4002801a02003ULL, 0x85040820080400ULL, 0x810102c808880400ULL, 0xe900410884800ULL, 0x8002020480840102ULL, 0x220200865090201ULL, 0x2010100a02021202ULL, 0x152048408022401ULL, 0x20080002081110ULL, 0x4001001021004000ULL, 0x800040400a011002ULL, 0xe4004081011002ULL, 0x1c004001012080ULL, 0x8004200962a00220ULL, 0x8422100208500202ULL, 0x2000402200300c08ULL, 0x8646020080080080ULL, 0x80020a0200100808ULL, 0x2010004880111000ULL, 0x623000a080011400ULL, 0x42008c0340209202ULL, 0x209188240001000ULL, 0x400408a884001800ULL, 0x110400a6080400ULL, 0x1840060a44020800ULL, 0x90080104000041ULL, 0x201011000808101ULL, 0x1a2208080504f080ULL, 0x8012020600211212ULL, 0x500861011240000ULL, 0x180806108200800ULL, 0x4000020e01040044ULL, 0x300000261044000aULL, 0x802241102020002ULL, 0x20906061210001ULL, 0x5a84841004010310ULL, 0x4010801011c04ULL, 0xa010109502200ULL, 0x4a02012000ULL, 0x500201010098b028ULL, 0x8040002811040900ULL, 0x28000010020204ULL, 0x6000020202d0240ULL, 0x8918844842082200ULL, 0x4010011029020020ULL
    };

// methods
public:
    static BB setOccupancy(int index, BB attackMask);

    static void initBishopMasks();
    static void initRookMasks();

    static BB rookAttacksOnTheFly(int square, BB blockers);
    static BB bishopAttacksOnTheFly(int square, BB blockers);

    // Magic number generation
    static BB randomBB();
    static BB findRookMagic(int sq, int numBits);
    static BB randomBBFewBits();
    static BB findBishopMagic(int sq, int numBits);
    static void generateMagicNumbers();

    // Initialise attacks
    static void initBishopAttacks();
    static void initRookAttacks();
    static void generateSlidingAttackTables();

    // Methods for move generation
    static inline BB getRookAttacks(int square, BB blockers) {
        blockers &= rookMask[square];
        blockers *= preCalcRookMagics[square];
        blockers >>= 64 - rookBitCounts[square];
        return rookAttacks[square][blockers];
    }

    static inline BB getBishopAttacks(int square, BB blockers) {
        blockers &= bishopMask[square];
        blockers *= preCalcBishopMagics[square];
        blockers >>= 64 - bishopBitCounts[square];
        return bishopAttacks[square][blockers];
    }

    static inline BB getQueenAttacks(int square, BB blockers) {
        return getBishopAttacks(square, blockers) | getRookAttacks(square, blockers);
    }
};


#endif //CHESS_CPP_MAGICS_H
